from aiogram import Dispatcher, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, LabeledPrice
from aiogram import F
from aiogram import Bot, Dispatcher, types
from aiogram.utils.deep_linking import create_start_link

from DataBase.sqlite_db import sql_select_username
from KeyBoards.inline_keyboards import kb_payment_method_donate, kb_payment_method_check, kb_donate_author, kb_start, \
    kb_partners
from config import PAYMENTS_TOKEN, Data
from createbot import *


inline_kb_router = Router()

value = int()

class Form(StatesGroup):
    price = State()


@inline_kb_router.callback_query(F.data == "make_link")
async def make_link(call: CallbackQuery):
    link = await create_start_link(bot, call.from_user.username, encode=True)
    await bot.send_message(chat_id=call.message.chat.id, text=f"<b>–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É‚¨áÔ∏è</b> –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Telegram, TikTok, Instagram –∏–ª–∏ –≤ –∫–∞–Ω–∞–ª–µ Telegram.\n\n{link}\n\n<a href='https://t.me/AnonQuestAQBot'>AnonQuestions</a>")


@inline_kb_router.callback_query(F.data == "donate_author_bot")
async def donate_author_bot(call: CallbackQuery, state: FSMContext):
    await state.set_state(Form.price)
    await bot.send_message(chat_id=call.message.chat.id, text="üéÅ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è <b>–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü. –∑–Ω–∞–∫–æ–≤</b>\n\n‚ùï–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ–ª–µ–≥—Ä–∞–º–æ–º - 10‚ÇΩ")


@inline_kb_router.message(Form.price)
async def process_price(message: types.Message, state: FSMContext):
    global value

    await state.update_data(price=message.text)
    data = await state.get_data()
    await state.clear()
    try:
        value = int(data['price'])
        await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=kb_payment_method_donate.as_markup())
    except Exception as err:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è: {err}")
        await message.answer("‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è.")


@inline_kb_router.callback_query(F.data.in_(['pay_rub_donate', 'pay_stars_donate']))
async def process_donate_author_bot(call: CallbackQuery):
    chat_id = call.message.chat.id
    if call.data == 'pay_rub_donate':
        await donate_send_invoice_rub(chat_id)
    if call.data == 'pay_stars_donate':
        await donate_send_invoice_stars(chat_id)



async def donate_send_invoice_rub(chat_id):
    global value

    prices = [LabeledPrice(label="–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä—É", amount=int(value) * 100)]
    await bot.send_invoice(
        chat_id,
        title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ—Ä–∞",
        description="ü•∫ –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–∞ —á–∞–µ–≤—ã–º–∏",
        provider_token=PAYMENTS_TOKEN,
        currency="rub",
        photo_url="https://images.wallpaperscraft.ru/image/single/dikaia_roza_rozovyj_kust_122926_2560x1080.jpg",
        photo_width=416,
        photo_height=170,
        is_flexible=False,
        prices=prices,
        payload="donate_author"
    )


async def donate_send_invoice_stars(chat_id):
    global value

    stars = int(value*1.35)
    if stars % 5 != 0:
        while stars % 5 != 0:
            stars -= 1

    prices = [LabeledPrice(label="–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä—É", amount=stars)]
    await bot.send_invoice(
        chat_id,
        title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ—Ä–∞",
        description="ü•∫ –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–∞ —á–∞–µ–≤—ã–º–∏",
        provider_token="",
        currency="XTR",
        photo_url="https://images.wallpaperscraft.ru/image/single/dikaia_roza_rozovyj_kust_122926_2560x1080.jpg",
        photo_width=416,
        photo_height=170,
        is_flexible=False,
        prices=prices,
        payload="donate_author"
    )


'''##################################################################################################################'''


@inline_kb_router.callback_query(F.data == "check_author")
async def check_author(call: CallbackQuery):
    await bot.send_message(chat_id=call.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=kb_payment_method_check.as_markup())


@inline_kb_router.callback_query(F.data.in_(['pay_rub_check', 'pay_stars_check']))
async def process_check_author(call: CallbackQuery):
    chat_id = call.message.chat.id
    if call.data == 'pay_rub_check':
        await check_author_send_invoice_rub(chat_id)
    if call.data == 'pay_stars_check':
        await check_author_send_invoice_stars(chat_id)


async def check_author_send_invoice_rub(chat_id):
    prices = [LabeledPrice(label="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", amount=50 * 100)]
    await bot.send_invoice(
        chat_id,
        title="–£–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
        description="üîç –í—ã —É–∑–Ω–∞–µ—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—Å–∞–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        provider_token=PAYMENTS_TOKEN,
        currency="rub",
        photo_url="https://images.wallpaperscraft.ru/image/single/dikaia_roza_rozovyj_kust_122926_2560x1080.jpg",
        photo_width=416,
        photo_height=170,
        is_flexible=False,
        prices=prices,
        payload="check_sender"
    )


async def check_author_send_invoice_stars(chat_id):
    prices = [LabeledPrice(label="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", amount=65)]
    await bot.send_invoice(
        chat_id,
        title="–£–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
        description="üîç –í—ã —É–∑–Ω–∞–µ—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—Å–∞–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        provider_token="",
        currency="XTR",
        photo_url="https://images.wallpaperscraft.ru/image/single/dikaia_roza_rozovyj_kust_122926_2560x1080.jpg",
        photo_width=416,
        photo_height=170,
        is_flexible=False,
        prices=prices,
        payload="check_sender"
    )


'''##################################################################################################################'''

@inline_kb_router.callback_query(F.data == 'donate_author_bot_menu')
async def donate_author_bot_menu(call: CallbackQuery):
    await bot.send_message(chat_id=call.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–¥–µ—Ä–∂–∫–∏ üëá", reply_markup=kb_donate_author.as_markup())


@inline_kb_router.callback_query(F.data == 'referral_links')
async def donate_author_bot_menu(call: CallbackQuery):
    await bot.send_message(chat_id=call.message.chat.id, text= """
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ —ç—Ç–∏—Ö –±–æ—Ç–æ–≤ üëá
–¢–µ–º —Å–∞–º—ã–º –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üéâ
""", reply_markup=kb_partners.as_markup())


@inline_kb_router.callback_query(F.data == 'back')
async def donate_author_bot_menu(call: CallbackQuery):
    await bot.send_message(chat_id=call.message.chat.id, text="<b>–ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!!!</b>\n\n–î–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=kb_start.as_markup())