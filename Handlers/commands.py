from aiogram import types, Router, F
from aiogram.filters import CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.payload import decode_payload

from DataBase.sqlite_db import sql_add_id, sql_select_id, sql_add_message
from KeyBoards.inline_keyboards import kb_start, kb_check_author
from createbot import *
from config import Data


commands_router = Router()

data = {}
msg_reply_id = None

class Form(StatesGroup):
    question = State()


@commands_router.message(CommandStart(deep_link=True))
async def command_handler_start_referral(message: types.Message, command: CommandObject, state: FSMContext):
    args = command.args
    recipient = decode_payload(args)
    username = message.from_user.username
    if not recipient == username:
        await sql_add_id(message)
        recipient_id = await sql_select_id(recipient)
        Data.recipient = recipient_id[0]
        await state.set_state(Form.question)
        await message.answer(f"–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å {recipient}")
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}-{username} –Ω–∞–ø–∏—Å–∞–ª —Å–∞–º–æ–º—É —Å–µ–±–µ –ø–æ —Å—Å—ã–ª–∫–µ")
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ")


@commands_router.message(Form.question)
async def process_question(message: types.Message, state: FSMContext):
    global msg_reply_id

    await state.update_data(question=message.text)
    data = await state.get_data()
    Data.sender = message.from_user.id
    await state.clear()
    await sql_add_message(message, data['question'], Data.recipient)
    await message.answer(f"‚úâÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å, –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞")

    msg = await bot.send_message(chat_id=Data.recipient, text=f"üéâ–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µüì®:\n\n<b>{data['question']}</b>\n\n‚Ü™Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞", reply_markup=kb_check_author.as_markup())
    msg_reply_id = msg.message_id


@commands_router.message(F.reply_to_message, F.chat.func(lambda chat: chat.id == Data.recipient))
async def handle_reply(message: types.Message):
    global msg_reply_id

    if message.reply_to_message.message_id == msg_reply_id:
        replied_msg = message.reply_to_message
        if replied_msg.from_user.id == (await message.bot.me()).id:
            await sql_add_message(message, message.text, Data.sender)
            msg = await bot.send_message(text=f"üéâ–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µüì®:\n\n<b>{message.text}</b>\n\n‚Ü™Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞", chat_id=Data.sender)
            msg_reply_id = msg.message_id


@commands_router.message(F.reply_to_message, F.chat.func(lambda chat: chat.id == Data.sender))
async def handle_reply(message: types.Message):
    global msg_reply_id

    if message.reply_to_message.message_id == msg_reply_id:
        replied_msg = message.reply_to_message
        if replied_msg.from_user.id == (await message.bot.me()).id:
            await sql_add_message(message, message.text, Data.recipient)
            msg = await bot.send_message(text=f"üéâ–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µüì®:\n\n<b>{message.text}</b>\n\n‚Ü™Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞", chat_id=Data.recipient, reply_markup=kb_check_author.as_markup())
            msg_reply_id = msg.message_id


@commands_router.message(CommandStart())
async def command_handler_start(message: types.Message):
    await sql_add_id(message)
    await message.answer(f'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - <a href="https://t.me/AnonQuestAQBot">AnonQuestions</a>.\n\n<b>–ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!!!</b>\n\n–î–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup=kb_start.as_markup())